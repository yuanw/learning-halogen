#+TITLE: Learning Purescript and Halogen
* Setup

nodePackages.parcel-bundler
https://github.com/JordanMartinez/learn-halogen/blob/latestRelease/spago.dhall

* bootstrap project

#+begin_src shell
spago init
#+end_src

* Hello World
#+begin_src purescript
import Effect.Console (log)
main = do
 log =  "🍝"
#+end_src

[[https://pursuit.purescript.org/packages/purescript-console/4.4.0/docs/Effect.Console#v:log][Effect.Console.log]]
log :: String -> Effect Unit

* Top level verbs
https://github.com/purescript-halogen/purescript-halogen/blob/master/docs/1%20-%20Introduction.md
A Halogen application consists of a tree of components.
Each component is a self-contained unit test has its own state, and re-render
when state changes.

component's state is changed by the component evaluting inputs known as queries,
or by evaluting actions

Each componet defive 5 types which govern how it operates:

1. State
2. Query - the external message which may be send to the component.
3. Action
4. Message
5. Input

* Follow static example

#+begin_src purescript
module Main where


-- Imports for lesson
import Halogen.HTML as HH

-- Imports for scaffolding
import Prelude

import Data.Const (Const)
import Effect (Effect)
import Effect.Aff (Aff, launchAff_)
import Halogen as H
import Halogen.Aff (awaitBody)
import Halogen.VDom.Driver (runUI)
import Effect.Console (log)

-- | HTML written in Purescript via Halogen's HTML DSL
-- | that is always rendered the same and does not include any event handling.
type StaticHTML = H.ComponentHTML Unit () Aff


-- | Shows how to use Halogen VDOM DSL to render HTML without properties or CSS
staticHtml :: StaticHTML
staticHtml =
  HH.div_
    -- The 'div' tag takes an Array of children
    [ HH.div_
      [ HH.span_
        -- as does the `span` tag
        [ HH.text "This is text in a span!" ]
      ]
    , HH.button_
      [ HH.text "You can click me, but I don't do anything." ]
    ]

-- | Wraps Halogen types cleanly, so that one gets clear compiler errors
staticComponent :: StaticHTML
                -> H.Component HH.HTML (Const Unit) Unit Void Aff
staticComponent renderHtml =
  H.mkComponent
    { initialState: const unit
    , render: \_ -> renderHtml
    , eval: H.mkEval H.defaultEval
    }
    
main :: Effect Unit
main = launchAff_ do
  --log "🍝"
  body <- awaitBody
  runUI (staticComponent staticHtml) unit body
#+end_src

[[https://pursuit.purescript.org/packages/purescript-halogen/4.0.0/docs/Halogen#t:ComponentSlot][ComponentHTML]]

#+begin_src purescript
type ComponentHTML actions slots m  = HTML (ComponentSlot HTML slots m action) action
newtype HTML w i = HTML (VDom.VDom (Array (Prop (Input i))) w)
#+end_src

A synonym for the output type of a render function, for a chidless components that render HTML.
